<?xml version="1.0"?>
<!-- ======================================================================
     This is a sample project to build our own ivy repository.
     ====================================================================== -->
<project name="ivy-repository" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="settings.dir" value="settings"/>
    <!-- use ibiblio-repo to get the jars from ibiblio -->
    <property name="local-mvn.resolver" value="local-mvn-repo"/>
    <property name="from.resolver" value="ibiblio-repo"/>
    <property name="to.resolver" value="local-ivy-repo"/>
    <property name="ibiblio.resolver" value="libraries"/>

    <property name="ivy.cache.dir" value="${basedir}/cache"/>
    <property name="dest.repo.dir" value="${basedir}/repo"/>

    <property name="m2.repo.dir" value="${user.home}/.m2/repository"/>
    <property name="ivy.jar.dir" value="${user.home}/.ivy2/jars"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property file="build.properties"/>

    <!-- =================================
         target: load-ivy
         this target is not necessary if you put ivy.jar in your ant lib directory
         if you already have ivy 1.4 in your ant lib, you can simply remove this
         target
         ================================= -->
    <target name="load-ivy">
        <!-- try to load ivy here from home ivy dir, in case the user has not already dropped
             it into ant's lib dir (note that the latter copy will always take precedence).
             We will not fail as long as ivy home lib dir exists (it may be empty) and
             ivy is in at least one of ant's lib dir or the ivy home lib dir. -->
        <path id="ivy.lib.path">
            <pathelement location="${ivy.jar.file}"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- =================================
         target: init-ivy
         ================================= -->
    <target name="init-ivy" depends="load-ivy">
        <ivy:settings id="basic.settings"    file="${settings.dir}/ivysettings-basic.xml"/>
        <ivy:settings id="advanced.settings" file="${settings.dir}/ivysettings-advanced.xml"/>
    </target>


  <!-- ==================================================================
       target: resolve
       ==================================================================-->
  <target name="resolve" depends="load-ivy" description="--> Download dependencies to specified dir">
    <mkdir dir="${lib.dir}"/> <!-- not usually necessary, ivy creates the directory IF there are dependencies -->
    <!-- the call to resolve is not mandatory, retrieve makes an implicit call if we don't -->
    <ivy:resolve file="${ivy.file}"/>
    <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]"/>
  </target>

  <!-- ==================================================================
       target: Install jar from local mvn repo to local ivy repo.
       The jar is supposed to be from local mvn repo. If not, can also from ivy cache,
       which can be generated by target inst-from-mvn.
       ==================================================================-->
  <target name="local-install" depends="init-ivy"
       description="--> install module from local mvn repository">
    <ivy:install settingsRef="basic.settings"
                 organisation="commons-lang" module="commons-lang" revision="2.4"
                 from="${local-mvn.resolver}" to="${to.resolver}"/>
  </target>

  <!-- =================================
       target: inst-from-mvn
       maven 2 no namespace and no dependencies
       This installs doc and src jars also.
       ================================= -->
  <target name="inst-from-mvn" depends="init-ivy"
      description="--> install module from maven repository">
      <ivy:install settingsRef="basic.settings"
              organisation="commons-lang" module="commons-lang" revision="2.6"
              from="${ibiblio.resolver}" to="${to.resolver}"/>
  </target>

    <!-- =================================
          target: maven2-deps
          maven 2 no namespace with dependencies
         ================================= -->
    <target name="maven2-deps" depends="init-ivy"
        description="--> install module from maven 2 repository with dependencies">
        <ivy:install settingsRef="basic.settings"
                organisation="org.hibernate" module="hibernate" revision="3.2.5.ga"
                from="${from.resolver}" to="${to.resolver}" transitive="true"/>
    </target>

    <!-- =================================
          target: maven2-namespace
          maven 2 with namespace no dependencies
         ================================= -->
    <target name="maven2-namespace" depends="init-ivy"
        description="--> install module from maven 2 using namespaces">
        <ivy:install settingsRef="advanced.settings"
                organisation="apache" module="commons-lang" revision="1.0"
                from="${from.resolver}" to="${to.resolver}"/>
    </target>

    <!-- =================================
          target: maven2-namespace-deps
          maven 2 with namespace and dependencies
         ================================= -->
    <target name="maven2-namespace-deps" depends="init-ivy"
        description="--> install module with dependencies from maven2 repo using namespaces">
        <ivy:install settingsRef="advanced.settings"
                organisation="hibernate" module="hibernate" revision="3.2.5.ga"
                from="${from.resolver}" to="${to.resolver}" transitive="true"/>
    </target>

    <!-- =================================
          target: clean-cache
         ================================= -->
    <target name="clean-cache" depends="init-ivy" description="--> clean the cache">
        <ivy:cleancache settingsRef="basic.settings"/>
        <ivy:cleancache settingsRef="advanced.settings"/>
        <delete dir="${ivy.cache.dir}" failonerror="true"/>
    </target>

  <!-- =================================
         target: clean-repo
       ================================= -->
  <target name="clean-repo" description="--> clean the destination repository">
    <delete dir="${ivy.cache.dir}" failonerror="true"/>
    <delete dir="${dest.repo.dir}" failonerror="true"/>
    <delete dir="${lib.dir}" failonerror="true"/>
  </target>

  <target name="clean" depends="clean-repo"/>
</project>
